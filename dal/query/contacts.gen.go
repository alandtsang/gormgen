// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/alandtsang/gormgen/dal/model"
)

func newContacts(db *gorm.DB) contacts {
	_contacts := contacts{}

	_contacts.contactsDo.UseDB(db)
	_contacts.contactsDo.UseModel(&model.Contacts{})

	tableName := _contacts.contactsDo.TableName()
	_contacts.ALL = field.NewField(tableName, "*")
	_contacts.ID = field.NewInt(tableName, "id")
	_contacts.Name = field.NewString(tableName, "name")
	_contacts.Mobile = field.NewString(tableName, "mobile")
	_contacts.MobileConfirmed = field.NewInt(tableName, "mobile_confirmed")
	_contacts.Email = field.NewString(tableName, "email")
	_contacts.EmailConfirmed = field.NewInt(tableName, "email_confirmed")
	_contacts.CreatedAt = field.NewTime(tableName, "created_at")
	_contacts.UpdatedAt = field.NewTime(tableName, "updated_at")

	_contacts.fillFieldMap()

	return _contacts
}

type contacts struct {
	contactsDo contactsDo

	ALL             field.Field
	ID              field.Int
	Name            field.String
	Mobile          field.String
	MobileConfirmed field.Int
	Email           field.String
	EmailConfirmed  field.Int
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (c contacts) Table(newTableName string) *contacts {
	c.contactsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contacts) As(alias string) *contacts {
	c.contactsDo.DO = *(c.contactsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contacts) updateTableName(table string) *contacts {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt(table, "id")
	c.Name = field.NewString(table, "name")
	c.Mobile = field.NewString(table, "mobile")
	c.MobileConfirmed = field.NewInt(table, "mobile_confirmed")
	c.Email = field.NewString(table, "email")
	c.EmailConfirmed = field.NewInt(table, "email_confirmed")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *contacts) WithContext(ctx context.Context) *contactsDo { return c.contactsDo.WithContext(ctx) }

func (c contacts) TableName() string { return c.contactsDo.TableName() }

func (c contacts) Alias() string { return c.contactsDo.Alias() }

func (c *contacts) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contacts) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["mobile"] = c.Mobile
	c.fieldMap["mobile_confirmed"] = c.MobileConfirmed
	c.fieldMap["email"] = c.Email
	c.fieldMap["email_confirmed"] = c.EmailConfirmed
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c contacts) clone(db *gorm.DB) contacts {
	c.contactsDo.ReplaceDB(db)
	return c
}

type contactsDo struct{ gen.DO }

func (c contactsDo) Debug() *contactsDo {
	return c.withDO(c.DO.Debug())
}

func (c contactsDo) WithContext(ctx context.Context) *contactsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contactsDo) Clauses(conds ...clause.Expression) *contactsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contactsDo) Returning(value interface{}, columns ...string) *contactsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contactsDo) Not(conds ...gen.Condition) *contactsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contactsDo) Or(conds ...gen.Condition) *contactsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contactsDo) Select(conds ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contactsDo) Where(conds ...gen.Condition) *contactsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contactsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *contactsDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c contactsDo) Order(conds ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contactsDo) Distinct(cols ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contactsDo) Omit(cols ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contactsDo) Join(table schema.Tabler, on ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contactsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contactsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contactsDo) RightJoin(table schema.Tabler, on ...field.Expr) *contactsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contactsDo) Group(cols ...field.Expr) *contactsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contactsDo) Having(conds ...gen.Condition) *contactsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contactsDo) Limit(limit int) *contactsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contactsDo) Offset(offset int) *contactsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contactsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contactsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contactsDo) Unscoped() *contactsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contactsDo) Create(values ...*model.Contacts) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contactsDo) CreateInBatches(values []*model.Contacts, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contactsDo) Save(values ...*model.Contacts) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contactsDo) First() (*model.Contacts, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Take() (*model.Contacts, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Last() (*model.Contacts, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Find() ([]*model.Contacts, error) {
	result, err := c.DO.Find()
	return result.([]*model.Contacts), err
}

func (c contactsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contacts, err error) {
	buf := make([]*model.Contacts, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contactsDo) FindInBatches(result *[]*model.Contacts, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contactsDo) Attrs(attrs ...field.AssignExpr) *contactsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contactsDo) Assign(attrs ...field.AssignExpr) *contactsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contactsDo) Joins(fields ...field.RelationField) *contactsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contactsDo) Preload(fields ...field.RelationField) *contactsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contactsDo) FirstOrInit() (*model.Contacts, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) FirstOrCreate() (*model.Contacts, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) FindByPage(offset int, limit int) (result []*model.Contacts, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contactsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *contactsDo) withDO(do gen.Dao) *contactsDo {
	c.DO = *do.(*gen.DO)
	return c
}
